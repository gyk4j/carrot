# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python

on:
  workflow_dispatch:
  # push:
  #   branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

defaults:
  run:
    shell: bash

env:
  PROJECT_NAME: ${{ github.event.repository.name }}
  PYTHON_VERSION: 3.8
  VIPS_VERSION: 8.10.5
  CACHE_NAME: cache-res

jobs:
  download:

    runs-on: windows-latest
    
    defaults:
      run:
        shell: bash

    steps:

    - name: Cache resources
      id: cache-res
      uses: actions/cache@v4        
      with:
        path: |
          lib64/libvips/*
          *.jpg
        key: ${{ env.CACHE_NAME }}-${{ runner.os }}
        
    - if: ${{ steps.cache-res.outputs.cache-hit != 'true' }}
      name: Extract libvips
      working-directory: ${{ runner.temp }}
      run: |
        curl -sSL -O https://github.com/libvips/libvips/releases/download/v$VIPS_VERSION/vips-dev-w64-all-$VIPS_VERSION.zip
        unzip -qq vips-dev-w64-all-$VIPS_VERSION.zip
        mkdir -p "$GITHUB_WORKSPACE/lib64/libvips"
        mv vips-dev-8.10/bin/*.dll "$GITHUB_WORKSPACE/lib64/libvips/"

    - if: ${{ steps.cache-res.outputs.cache-hit != 'true' }}
      name: Copy images
      working-directory: ${{ runner.temp }}
      run: |
        curl -sSL -o 640x480.jpg https://placehold.co/640x480/jpeg
        cp 640x480.jpg "$GITHUB_WORKSPACE/0.jpg"
        cp 640x480.jpg "$GITHUB_WORKSPACE/1.jpg"
        cp 640x480.jpg "$GITHUB_WORKSPACE/2.jpg"
        cp 640x480.jpg "$GITHUB_WORKSPACE/3.jpg"
        cp 640x480.jpg "$GITHUB_WORKSPACE/4.jpg"
        cp 640x480.jpg "$GITHUB_WORKSPACE/5.jpg"
        cp 640x480.jpg "$GITHUB_WORKSPACE/6.jpg"
        cp 640x480.jpg "$GITHUB_WORKSPACE/7.jpg"
        cp 640x480.jpg "$GITHUB_WORKSPACE/8.jpg"

    # - name: Lint with flake8
    #   run: |
#       stop the build if there are Python syntax errors or undefined names
        # flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#       exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        # flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    # - name: Test with pytest
    #   run: |
    #     pytest

#   package:

#     runs-on: windows-latest
    
#     steps:

#     - uses: actions/checkout@v4
#     - name: Set up Python ${{ env.PYTHON_VERSION }}
#       uses: actions/setup-python@v6
#       with:
#         python-version: '${{ env.PYTHON_VERSION }}'
#     - name: Install dependencies
#       run: |
#         py -${{ env.PYTHON_VERSION }} -m pip install --upgrade pip --quiet
#         pip install flake8 pytest build setuptools pyinstaller cx-Freeze==6.15.16
#         if [ -f requirements.txt ]; then py -${{ env.PYTHON_VERSION }} -m pip install -r requirements.txt --quiet; fi

#     - name: Build Python Package
#       run: |
#         py -${{ env.PYTHON_VERSION }} -m build --quiet

#     - name: Upload Package Artifact
#       uses: actions/upload-artifact@v4
#       with:
#         name: ${{ env.PROJECT_NAME }}-whl
#         path: dist/
#         if-no-files-found: error
#         retention-days: 1

  pyinstaller:

    runs-on: windows-latest

    needs: download
    
    steps:
    
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v6
      with:
        python-version: '${{ env.PYTHON_VERSION }}'

    - name: Install dependencies
      run: |
        py -${{ env.PYTHON_VERSION }} -m pip install --upgrade pip --quiet
        if [ -f requirements.txt ]; then py -${{ env.PYTHON_VERSION }} -m pip install -r requirements.txt --quiet; fi
      # pip install flake8 pytest build setuptools pyinstaller cx-Freeze==6.15.16

    - name: Reuse cached resources
      id: cache-res
      uses: actions/cache@v4        
      with:
        path: |
          lib64/libvips/*
          *.jpg
        key: ${{ env.CACHE_NAME }}-${{ runner.os }}

    - name: Build PyInstaller Package
      run: |
        pyinstaller --noconfirm --log-level WARN pyinstaller.spec
      # pyi-set_version file_version_info.txt dist/carrot/carrot.exe

    - name: Upload PyInstaller Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}-bin-${{ runner.os }}-${{ runner.arch }}-pyinstaller
        path: dist/${{ env.PROJECT_NAME }}/
        if-no-files-found: error
        retention-days: 1

  cx_Freeze:

    runs-on: windows-latest

    needs: download
    
    steps:
    
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v6
      with:
        python-version: '${{ env.PYTHON_VERSION }}'
        
    - name: Install dependencies
      run: |
        py -${{ env.PYTHON_VERSION }} -m pip install --upgrade pip --quiet
        if [ -f requirements.txt ]; then py -${{ env.PYTHON_VERSION }} -m pip install -r requirements.txt --quiet; fi
      # pip install flake8 pytest build setuptools pyinstaller cx-Freeze==6.15.16

    - name: Reuse cached resources
      id: cache-res
      uses: actions/cache@v4        
      with:
        path: |
          lib64/libvips/*
          *.jpg
        key: ${{ env.CACHE_NAME }}-${{ runner.os }}

    - name: Build cx_Freeze Package
      run: |
        py -${{ env.PYTHON_VERSION }} setup.py build

    - name: Upload cx_Freeze Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}-bin-${{ runner.os }}-${{ runner.arch }}-cxfreeze
        path: build/exe.win-amd64-${{ env.PYTHON_VERSION }}/
        if-no-files-found: error
        retention-days: 1
        